name: Maven Release and Build Workflow

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout kodu
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Skonfiguruj JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Debuguj zmienne środowiskowe
      - name: Debug environment variables
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Token length: ${#GITHUB_TOKEN}"
          echo "Remote URL:"
          git remote -v

      # 4. Wyodrębnij wersję z pom.xml
      - name: Extract version from pom.xml
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # 6. Skonfiguruj HTTPS Git z tokenem
      - name: Configure HTTPS Git with GITHUB_TOKEN
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global credential.helper store
          echo "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com" > ~/.git-credentials
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git remote -v

      # 7. Pobierz wszystkie tagi i gałęzie
      - name: Fetch all tags and branches
        run: |
          git fetch --all
          git fetch --tags

      # 8. Maven Release
      - name: Maven Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          mvn release:prepare release:perform -B -X

  create_release:
    needs: release
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout kodu
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Utwórz GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

      # 3. Dodaj artefakty do Release
      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/SortingApp.jar
          asset_name: SortingApp.jar
          asset_content_type: application/java-archive
